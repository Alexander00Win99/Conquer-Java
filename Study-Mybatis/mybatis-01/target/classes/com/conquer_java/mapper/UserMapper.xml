<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 绑定一个Dao/Mapper接口 -->
<mapper namespace="com.conquer_java.mapper.UserMapper">
    <!-- 下面定义各个CRUD Create-Retrieve-Update-Delete操作 -->
    <!-- id对应方法名称；parameterType对应参数类型，如若是基本类型，可以省略；resultType对应返回值类型，如若是个集合例如List<User>，使用泛型类型即可一一对应 -->

    <!-- 查询所有用户 -->
    <select id="getUserList" resultType="com.conquer_java.pojo.User">
        select * from demo_mybatis.user
    </select>

    <!-- 查询指定用户 -->
    <select id="getUserById" parameterType="int" resultType="com.conquer_java.pojo.User">
        select * from demo_mybatis.user where id = #{id}
    </select>

    <!-- 新建用户 -->
    <!-- 对象属性可以直接使用，例如："(#{id}, #{name}, #{password})" -->
    <!-- 当方法调用时，需要传递对象，因此，构造器所有参数必须保证一个不落==使用不便 -->
    <!-- 如果误将insert标签写成select标签，将会报错如下： -->
    <!-- org.apache.ibatis.binding.BindingException: Mapper method 'com.conquer_java.mapper.UserMapper.createUser attempted to return null from a method with a primitive return type (int). -->
    <insert id="createUser" parameterType="com.conquer_java.pojo.User">
        insert into demo_mybatis.user (id, name, password) values (#{id}, #{name}, #{password})
    </insert>

    <!-- 新建用户 -->
    <!-- 使用Map作为参数，无需知晓数据库表结构，只需直接查询指定字段即可 -->
    <!-- 实体类对象属性|数据库表字段过多，如果使用对象实例作为参数，则需传递太多参数才能构造对象——可以使用Map只传Key简化参数 -->
    <insert id="addUser" parameterType="map">
        insert into demo_mybatis.user (id, name, password) values (#{var1}, #{var2}, #{var3})
    </insert>

    <!-- 修改用户 -->
    <!-- 如果SQL语句里面误写"password = #{pass}"，则会导致如下错误： -->
    <!-- org.apache.ibatis.exceptions.PersistenceException: -->
    <!-- ### Error updating database. Cause: org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'pass' in 'class com.conquer_java.pojo.User' -->
    <!-- 两种解决办法：1) 检查类的属性字段，确保SQL语句书写正确；2) 新增错误属性的get方法getXXX();其中返回正确属性 -->
    <update id="updateUser" parameterType="com.conquer_java.pojo.User">
        <!-- 对象属性可以直接使用 -->
        update demo_mybatis.user set name = #{name}, password = #{password} where id = #{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="int">
        delete from demo_mybatis.user where id = #{id}
    </delete>
</mapper>