package com.conquer_java.design_pattern.factory.factory_method;

public class Customer {
    public static void main(String[] args) {
        System.out.println("++++++++++++++++Begin 工厂方法创建对象++++++++++++++++");
        /**
         * 模式说明：
         * 工厂方法模式
         *
         * 适用场景：
         * 用户无需知道具体产品类名称，只需知道具体工程类即可；每个具体工厂类只需生成一种具体产品。
         *
         * 特点：
         * 1) 符合开闭原则，如需增加某个产品，只需增加对应产品的具体工厂类。
         * 2) 符合单一职责原则，每个具体工厂类只能负责生产一种产品。
         *
         * 缺点：
         * 1) 类的数量过多：新增某个产品，不仅需要新增对应产品类，而且需要新增具体工厂类，增加系统复杂度，最终增加编译运行的系统开销；
         * 2) 考虑系统的可扩展性，需要引入抽象层，在客户端代码中使用抽象层进行定义，增加系统的抽象度，同时，实现可能需要DOM、反射技术，增加系统实现难度；
         * 3) 虽然保证了对修改关闭，但是，如果需要更改某个特定产品，依然需要修改具体工厂类的生产逻辑；
         * 4) 一个具体工厂只能生成一种具体产品。
         */
        new MiFactory().produceMobile();
        new HuaweiFactory().produceMobile();
        System.out.println("----------------End 工厂方法创建对象----------------");
    }
}
